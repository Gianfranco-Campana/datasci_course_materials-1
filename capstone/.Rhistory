##########################################################
count_311 <- aggregate((det311$cluster_id), list(cluster_id=as.character(det311$cluster_id)), length)
count_311
allevents <- merge(allevents, count_311, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[7] <- "count_311"
str(allevents)
##########################################################
# 3. Adding number of incidents (crime) per cluster      #
##########################################################
count_crime <- aggregate((detcrime$cluster_id), list(cluster_id=as.character(detcrime$cluster_id)), length)
count_crime
allevents <- merge(allevents, count_crime, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[8] <- "count_crime"
str(allevents)
##########################################################
# 4. Adding number of incidents (violation) per cluster  #
##########################################################
count_viol <- aggregate((detviol$cluster_id), list(cluster_id=as.character(detviol$cluster_id)), length)
count_viol
allevents <- merge(allevents, count_viol, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[9] <- "count_viol"
str(allevents)
#####################################################################
#                                                                   #
# train a model using :                                             #
#                                                                   #
#          1. freq (number of bligthed location per building)       #
#          2. Average judgmentamt  per building                     #
#          3. Number of 311 calls  per building                     #
#          4. Number of crimes     per building                     #
#          5. Number of violations per building                     #
#                                                                   #
#####################################################################
# Here, the number of events for location outside any "building" (cluster of blighted location),
# only count for itself. The freq has to be valued accordingly.
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "det311"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "detcrime"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "detviol"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0),]$count_viol  <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$freq  <- 0
allevents$label <- ""
allevents[which(allevents$cluster_id != 0 | allevents$type == "detdem"),]$label <- "blight"
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$label <- "not_blight"
# CreateDataPartition preserves the proportion of the outcome variables.
# We bootstrap a sample for the negative outcome the same as the positive
# to follow the guidelines.
# Sample return a vector of indices
sam <- allevents[which(allevents$label == "not_blight"),][sample(nrow(allevents[which(allevents$label == "blight"),]), nrow(allevents[which(allevents$label == "blight"),])),]
nrow(sam)
sampled_events <- rbind(
allevents[which(allevents$label == "blight"),],
sam
)
trainIndex <- createDataPartition(sampled_events$label, p = .5,
list = FALSE,
times = 1)
eventstrain <- sampled_events[trainIndex,]
eventstest  <- sampled_events[-trainIndex,]
## 5-fold Cross Validation
fitControl <- trainControl(
method =  "repeatedcv",
number = 5,
repeats = 5)
# Including freq will lead to a perfect model.
eventstrain$label <- factor(eventstrain$label)
glmfit1 <- train(label ~
freq
+ avg_judg
+ count_311
+ count_crime
+ count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
allevents <- rbind(
data.frame(type = "detdem",
lat = detdem$lat,
lon = detdem$lon,
cluster_id = detdem$cluster_id,
freq = detdem$freq),
data.frame(type = "detviol",
lat = detviol$lat,
lon = detviol$lon,
cluster_id = detviol$cluster_id,
freq = detviol$freq),
data.frame(type = "detcrime",
lat = detcrime$lat,
lon = detcrime$lon,
cluster_id = detcrime$cluster_id,
freq = detcrime$freq),
data.frame(type = "det311",
lat = det311$lat,
lon = det311$lon,
cluster_id = det311$cluster_id,
freq = det311$freq)
)
detviol$judgmentamt <- as.numeric(sub("\\$","", detviol$judgmentamt))
detviol$judgmentamt[which(is.na(detviol$judgmentamt))] <- 0
avg_judg <- aggregate(detviol[, "judgmentamt"], list(cluster_id = as.character(detviol$cluster_id)), mean)
allevents <- merge(allevents, avg_judg, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[6] <- "avg_judg"
##########################################################
# 2. Adding number of incidents (311 calls) per cluster  #
##########################################################
count_311 <- aggregate((det311$cluster_id), list(cluster_id=as.character(det311$cluster_id)), length)
count_311
allevents <- merge(allevents, count_311, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[7] <- "count_311"
str(allevents)
##########################################################
# 3. Adding number of incidents (crime) per cluster      #
##########################################################
count_crime <- aggregate((detcrime$cluster_id), list(cluster_id=as.character(detcrime$cluster_id)), length)
count_crime
allevents <- merge(allevents, count_crime, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[8] <- "count_crime"
str(allevents)
##########################################################
# 4. Adding number of incidents (violation) per cluster  #
##########################################################
count_viol <- aggregate((detviol$cluster_id), list(cluster_id=as.character(detviol$cluster_id)), length)
count_viol
allevents <- merge(allevents, count_viol, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[9] <- "count_viol"
str(allevents)
#####################################################################
#                                                                   #
# train a model using :                                             #
#                                                                   #
#          1. freq (number of bligthed location per building)       #
#          2. Average judgmentamt  per building                     #
#          3. Number of 311 calls  per building                     #
#          4. Number of crimes     per building                     #
#          5. Number of violations per building                     #
#                                                                   #
#####################################################################
# Here, the number of events for location outside any "building" (cluster of blighted location),
# only count for itself. The freq has to be valued accordingly.
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "det311"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "detcrime"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type == "detviol"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$freq  <- 0
allevents$label <- ""
allevents[which(allevents$cluster_id != 0 | allevents$type == "detdem"),]$label <- "blight"
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$label <- "not_blight"
# CreateDataPartition preserves the proportion of the outcome variables.
# We bootstrap a sample for the negative outcome the same as the positive
# to follow the guidelines.
# Sample return a vector of indices
sam <- allevents[which(allevents$label == "not_blight"),][sample(nrow(allevents[which(allevents$label == "blight"),]), nrow(allevents[which(allevents$label == "blight"),])),]
nrow(sam)
sampled_events <- rbind(
allevents[which(allevents$label == "blight"),],
sam
)
trainIndex <- createDataPartition(sampled_events$label, p = .5,
list = FALSE,
times = 1)
eventstrain <- sampled_events[trainIndex,]
eventstest  <- sampled_events[-trainIndex,]
## 5-fold Cross Validation
fitControl <- trainControl(
method =  "repeatedcv",
number = 5,
repeats = 5)
# Including freq will lead to a perfect model.
eventstrain$label <- factor(eventstrain$label)
glmfit1 <- train(label ~
freq
+ avg_judg
+ count_311
+ count_crime
+ count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1 <- train(label ~
freq
+ avg_judg
* count_311
* count_crime
* count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
summary(glmfit1)
glmfit1 <- train(label ~
freq
+ avg_judg
* count_viol
+ count_crime
+ count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1 <- train(label ~
freq
+ avg_judg
* count_viol,
# + count_crime
# + count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1 <- train(label ~
# freq
+ avg_judg
+ count_viol
+ count_crime
+ count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
glmfit1 <- train(label ~ .,
#  freq
# + avg_judg
# + count_viol
# + count_crime
# + count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
glmfit1 <- train(label ~
freq
+ avg_judg
+ count_viol
+ count_crime
+ count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
glmfit1 <- train(label ~
freq,
# + avg_judg
# + count_viol
# + count_crime
# + count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
allevents <- rbind(
data.frame(type = "detdem",
lat = detdem$lat,
lon = detdem$lon,
cluster_id = detdem$cluster_id,
freq = detdem$freq),
data.frame(type = "detviol",
lat = detviol$lat,
lon = detviol$lon,
cluster_id = detviol$cluster_id,
freq = detviol$freq),
data.frame(type = "detcrime",
lat = detcrime$lat,
lon = detcrime$lon,
cluster_id = detcrime$cluster_id,
freq = detcrime$freq),
data.frame(type = "det311",
lat = det311$lat,
lon = det311$lon,
cluster_id = det311$cluster_id,
freq = det311$freq)
)
detviol$judgmentamt <- as.numeric(sub("\\$","", detviol$judgmentamt))
detviol$judgmentamt[which(is.na(detviol$judgmentamt))] <- 0
avg_judg <- aggregate(detviol[, "judgmentamt"], list(cluster_id = as.character(detviol$cluster_id)), mean)
allevents <- merge(allevents, avg_judg, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[6] <- "avg_judg"
##########################################################
# 2. Adding number of incidents (311 calls) per cluster  #
##########################################################
count_311 <- aggregate((det311$cluster_id), list(cluster_id=as.character(det311$cluster_id)), length)
count_311
allevents <- merge(allevents, count_311, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[7] <- "count_311"
str(allevents)
##########################################################
# 3. Adding number of incidents (crime) per cluster      #
##########################################################
count_crime <- aggregate((detcrime$cluster_id), list(cluster_id=as.character(detcrime$cluster_id)), length)
count_crime
allevents <- merge(allevents, count_crime, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[8] <- "count_crime"
str(allevents)
##########################################################
# 4. Adding number of incidents (violation) per cluster  #
##########################################################
count_viol <- aggregate((detviol$cluster_id), list(cluster_id=as.character(detviol$cluster_id)), length)
count_viol
allevents <- merge(allevents, count_viol, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[9] <- "count_viol"
str(allevents)
#####################################################################
#                                                                   #
# train a model using :                                             #
#                                                                   #
#          1. freq (number of bligthed location per building)       #
#          2. Average judgmentamt  per building                     #
#          3. Number of 311 calls  per building                     #
#          4. Number of crimes     per building                     #
#          5. Number of violations per building                     #
#                                                                   #
#####################################################################
# Here, the number of events for location outside any "building" (cluster of blighted location),
# only count for itself. The freq has to be valued accordingly.
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_viol  <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "det311"),]$count_311   <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "detcrime"),]$count_crime <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "detviol"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$freq  <- 0
allevents$label <- ""
allevents[which(allevents$cluster_id != 0 | allevents$type == "detdem"),]$label <- "blight"
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$label <- "not_blight"
# CreateDataPartition preserves the proportion of the outcome variables.
# We bootstrap a sample for the negative outcome the same as the positive
# to follow the guidelines.
# Sample return a vector of indices
sam <- allevents[which(allevents$label == "not_blight"),][sample(nrow(allevents[which(allevents$label == "blight"),]), nrow(allevents[which(allevents$label == "blight"),])),]
nrow(sam)
sampled_events <- rbind(
allevents[which(allevents$label == "blight"),],
sam
)
trainIndex <- createDataPartition(sampled_events$label, p = .5,
list = FALSE,
times = 1)
eventstrain <- sampled_events[trainIndex,]
eventstest  <- sampled_events[-trainIndex,]
## 5-fold Cross Validation
fitControl <- trainControl(
method =  "repeatedcv",
number = 5,
repeats = 5)
# Including freq will lead to a perfect model.
eventstrain$label <- factor(eventstrain$label)
glmfit1 <- train(label ~
freq,
# + avg_judg
# + count_viol
# + count_crime
# + count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
allevents <- rbind(
data.frame(type = "detdem",
lat = detdem$lat,
lon = detdem$lon,
cluster_id = detdem$cluster_id,
freq = detdem$freq),
data.frame(type = "detviol",
lat = detviol$lat,
lon = detviol$lon,
cluster_id = detviol$cluster_id,
freq = detviol$freq),
data.frame(type = "detcrime",
lat = detcrime$lat,
lon = detcrime$lon,
cluster_id = detcrime$cluster_id,
freq = detcrime$freq),
data.frame(type = "det311",
lat = det311$lat,
lon = det311$lon,
cluster_id = det311$cluster_id,
freq = det311$freq)
)
detviol$judgmentamt <- as.numeric(sub("\\$","", detviol$judgmentamt))
detviol$judgmentamt[which(is.na(detviol$judgmentamt))] <- 0
avg_judg <- aggregate(detviol[, "judgmentamt"], list(cluster_id = as.character(detviol$cluster_id)), mean)
allevents <- merge(allevents, avg_judg, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[6] <- "avg_judg"
##########################################################
# 2. Adding number of incidents (311 calls) per cluster  #
##########################################################
count_311 <- aggregate((det311$cluster_id), list(cluster_id=as.character(det311$cluster_id)), length)
count_311
allevents <- merge(allevents, count_311, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[7] <- "count_311"
str(allevents)
##########################################################
# 3. Adding number of incidents (crime) per cluster      #
##########################################################
count_crime <- aggregate((detcrime$cluster_id), list(cluster_id=as.character(detcrime$cluster_id)), length)
count_crime
allevents <- merge(allevents, count_crime, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[8] <- "count_crime"
str(allevents)
##########################################################
# 4. Adding number of incidents (violation) per cluster  #
##########################################################
count_viol <- aggregate((detviol$cluster_id), list(cluster_id=as.character(detviol$cluster_id)), length)
count_viol
allevents <- merge(allevents, count_viol, by.x = "cluster_id", by.y = "cluster_id")  # on all datasets
colnames(allevents)[9] <- "count_viol"
str(allevents)
#####################################################################
#                                                                   #
# train a model using :                                             #
#                                                                   #
#          1. freq (number of bligthed location per building)       #
#          2. Average judgmentamt  per building                     #
#          3. Number of 311 calls  per building                     #
#          4. Number of crimes     per building                     #
#          5. Number of violations per building                     #
#                                                                   #
#####################################################################
# Here, the number of events for location outside any "building" (cluster of blighted location),
# only count for itself. The freq has to be valued accordingly.
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$count_viol  <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "det311"),]$count_311   <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "detcrime"),]$count_crime <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type == "detviol"),]$count_viol  <- 1
# allevents[which(allevents$cluster_id == 0),]$count_311   <- 1
# allevents[which(allevents$cluster_id == 0),]$count_crime <- 1
# allevents[which(allevents$cluster_id == 0),]$count_viol  <- 1
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$freq  <- 0
allevents$label <- ""
allevents[which(allevents$cluster_id != 0 | allevents$type == "detdem"),]$label <- "blight"
allevents[which(allevents$cluster_id == 0 & allevents$type != "detdem"),]$label <- "not_blight"
# CreateDataPartition preserves the proportion of the outcome variables.
# We bootstrap a sample for the negative outcome the same as the positive
# to follow the guidelines.
# Sample return a vector of indices
sam <- allevents[which(allevents$label == "not_blight"),][sample(nrow(allevents[which(allevents$label == "blight"),]), nrow(allevents[which(allevents$label == "blight"),])),]
nrow(sam)
sampled_events <- rbind(
allevents[which(allevents$label == "blight"),],
sam
)
trainIndex <- createDataPartition(sampled_events$label, p = .5,
list = FALSE,
times = 1)
eventstrain <- sampled_events[trainIndex,]
eventstest  <- sampled_events[-trainIndex,]
## 5-fold Cross Validation
fitControl <- trainControl(
method =  "repeatedcv",
number = 5,
repeats = 5)
# Including freq will lead to a perfect model.
eventstrain$label <- factor(eventstrain$label)
glmfit1 <- train(label ~
freq,
# + avg_judg
# + count_viol
# + count_crime
# + count_viol,
data = eventstrain,
method = "bayesglm",
trControl = fitControl,
family = "quasibinomial"
# ,control = list(maxit = x.5000)
)
glmfit1
plot(eventstrain$count_crime ~ eventstrain$label )
summary(glmfit1)
eventstest1 <- eventstest
eventstest1$label <- NULL
predglm <- predict(glmfit1, newdata=eventstest1)
confusionMatrix(predglm, eventstest$label)
